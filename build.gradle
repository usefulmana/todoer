plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'org.todoer'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'com.google.firebase:firebase-admin:9.4.2'
    implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-ratelimiter:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Add at the end of your build.gradle
bootRun {
    systemProperties = System.properties

    doFirst {
        def profile = project.hasProperty('profile') ? project.property('profile') : 'dev'
        def envFile = file("src/main/resources/.env.${profile}")

        if (envFile.exists()) {
            println "Loading environment from: ${envFile.path}"
            Properties props = new Properties()
            envFile.withInputStream { props.load(it) }

            // Set system properties for Spring Boot
            props.each { key, value ->
                systemProperty key, value
            }
            // Set active profile
            systemProperty 'spring.profiles.active', profile
        } else {
            throw new GradleException("Environment file not found: ${envFile.path}")
        }
    }
}

tasks.register('bootRunEnv') {
    group = 'application'
    description = 'Runs the application with specified profile'

    doFirst {
        println "Starting application with Spring Boot..."
    }

    finalizedBy bootRun
}